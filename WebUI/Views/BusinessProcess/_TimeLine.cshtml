@using Framework.Maybe
@using Newtonsoft.Json
@using WebUI.Models.BusinessProcess
@model TimeLineVm


@{
    string wrapID = "wrap_" + Guid.NewGuid().ToString("N");
}

<div id="@wrapID" class="timeline-window">
    <div class="container flow-timeline">
        @if (Model.ShowCurrentStages)
        {
            @Html.Partial("_CurrentStages", Model.CurrentStages)
        }

        <div class="page-header" style="margin-top: 0">
            <h3 id="timeline">История движения :</h3>
        </div>
        <ul class="timeline">
            @foreach (TimeLineElementVm item in Model.GetElements())
            {
                if (item.ShowedDate.HasValue)
                {
                    <li style="height: 60px;">
                        <div class="timeline-badge-date"><i class="glyphicon glyphicon-calendar"></i>&nbsp;@item.ShowedDate.Value.ToShortDateString()</div>
                    </li>
                }

                @RenderTimelLineElement(item)
            }
            <li style="margin-bottom: 40px;">
                <div class="timeline-badge" style="background-color: #6f5499;">
                    <i class="halfling halfling-chevron-up"></i>
                </div>
            </li>
        </ul>
    </div>
</div>

<script type="text/template" id="performer-template">
    <div class="thumbnail">
        <img style="width: 200px; height: 200px;" width="200" height="200" src="/Files/GetImage?id=<%= user.Image ? user.Image.FileID : '' %>&height=200&width=200" alt="...">
    </div>
    <dl>
        <dt>ФИО</dt>
        <dd><%= pbaAPI.htmlEncode(user.FullName) %></dd>
        <dt>Отдел</dt>
        <dd><%= pbaAPI.htmlEncode(user.Category) %></dd>
    </dl>
</script>

<script>
    $(function () {
        var performers = @Html.Raw(Model.GetAllUsersString());

        $("#@wrapID").find("[data-report]").click(function () {
            $("<div />").kendoWindow({
                width: $(window).width(),
                height: $(window).height(),
                title: "История движения объекта",
                content: "/BusinessProcess/WorkflowReport?id=@Model.WorkflowId",
                resizable: false,
                maximize: true,
                actions: ["Close"],
                modal: true,
                deactivate: function () {
                    this.destroy();
                },
            }).data("kendoWindow").center().open().maximize();
        });

        $("[data-userid]").each(function () {
            var usr = performers[$(this).attr('data-userid')];
            if (usr) {
                $(this).popover({
                    trigger: 'hover',
                    container: 'body',
                    title: 'Исполнитель',
                    html: true,
                    placement: $(this).data('plbottom') == "" ? 'bottom' : ($(this).closest('li').is(':first-child') ? 'bottom' : 'top'),
                    content: _.template($("#performer-template").html(), { user: usr })
                }).click(function () {
                    pbaAPI.openViewModelEx("User",
                    {
                        wid: "@wrapID",
                        title: "Пользователь",
                        isMaximaze: false,
                        id: $(this).data('userid'),
                        isReadOnly: true
                    });
                });
            }
        });
    });
</script>

@helper RenderTimelLineElement(TimeLineElementVm item)
{

    <li class="@(item.IsOdd ? "timeline-inverted" : "")">
        @if (item is ClosedTimeLineElementVm)
        {
            @Html.Partial("_ClosedTimeLineElementVm", item)
        }
        else if (item is TerminatedTimeLineElementVm)
        {
            @Html.Partial("_TerminatedTimeLineElementVm", item)
        }
        else if (item is WorkflowOwnerStepTimeLineLementVm)
        {
            @Html.Partial("_WFOwnerTimeLineElementVm", item)
        }
    </li>

    <hr />
}

@helper RenderInfoMessage()
{
    <div class="alert alert-info" role="alert">
        Объект начал движение
        @{
            var entryPoint = Model.Elements.LastOrDefault().IfNotNullReturn(x => x as ClosedTimeLineElementVm);

            if (entryPoint != null)
            {
                <strong>@entryPoint.Date.ToShortDateString() </strong><text>(@((DateTime.Now.Date - entryPoint.Date.Date).Days) д. назад)</text>

                var lastPoint = Model.Elements.FirstOrDefault();

                if (lastPoint is TerminatedTimeLineElementVm)
                {
                    var t = lastPoint as TerminatedTimeLineElementVm;
                    <text>и завершил свое движение <strong>@t.Date.ToShortDateString() </strong>(@((DateTime.Now.Date - t.Date.Date).Days) д. назад) на этапе <strong>@lastPoint.Title </strong>
                    <span class="label label-info pull-right">@((t.Date - entryPoint.Date.Date).Days) д.</span>
                    </text>
                }
            }
        }
    </div>
}

