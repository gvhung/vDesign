@using Framework.Maybe
@model EditorViewModel

@{
    ViewModelConfig config = Model.ViewModelConfig;

    string propertyName = Model.PropertyName;

    string wrapID = "wrap_" + Guid.NewGuid().ToString("N");
    string multiSelectID = "ms_" + Guid.NewGuid().ToString("N");


    string field = "Object";
    string mnemonic = config.Mnemonic;
    string lookupProperty = config.LookupPropertyForUI;
    string placeholder = "Выберите значение...";
    string[] customParams = Model.EditorTemplateParams.With(x => x.Split(';'));

    bool isUser = false;

    string validationmsg = "v_" + Guid.NewGuid().ToString("N");

    if (customParams != null && customParams.Length == 3)
    {
        field = customParams[0];
        mnemonic = customParams[1];
        lookupProperty = customParams[2];

        isUser = typeof(Base.Security.BaseUser).IsAssignableFrom(Model.EditorType.GetProperty(field).PropertyType);
    }
    else
    {
        isUser = typeof(Base.Security.BaseUser).IsAssignableFrom(Model.EditorType.BaseType.GetGenericArguments()[0]);
    }

    string itemTpl = isUser
        ? "<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.getUserStr(data, false) #</span>"
        : String.Format("<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.htmlEncode(data.{0}) #</span>", lookupProperty);

    string tagTpl = isUser
        ? "<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.getUserStr(data, false, 24, 24) #</span>"
        : String.Format("<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.htmlEncode(data.{0}) #</span>", lookupProperty);

}

<script>
    $(function () {
        window['@wrapID'] = {
            value: [],
            getMultiselect: function() {
                return $("#@wrapID").find("#@multiSelectID").data("kendoMultiSelect");
            },
            onAdditionalData: function () {
                var multiSelect = $("#@multiSelectID").data("kendoMultiSelect");

                var val = multiSelect.input.val();

                if (val == "@placeholder") val = "";

                var value = window['@wrapID'].value;

                var ids;

                if (value) {
                    ids = pbaAPI.getIDs(value).join(";");
                }

                return {
                    startswith: val,
                    mnemonic: "@mnemonic",
                    ids: ids,
                };
            },
            openDialog: function () {
                pbaAPI.openModalDialog("@mnemonic",
                    function (res) {
                        var prdata = window['@wrapID'].value;

                        var multiselect = window['@wrapID'].getMultiselect();

                        var ids = pbaAPI.getIDs(prdata);

                        for (var i = 0; i < res.length; i++) {
                            if ($.inArray(res[i].ID, ids) == -1) {
                                prdata.push(res[i]);
                                multiselect.dataSource.pushCreate(res[i]);
                            }
                        }


                        window['@wrapID'].syncValue(false);
                    }, {
                        title: "ВЫБОР - @config.ListView.Title",
                        multiselect: @Model.AllowMultiple.ToString().ToLower()
                        });
            },
            syncValue: function (load) {
                var multiselect = window['@wrapID'].getMultiselect();

                multiselect.dataSource.filter({});

                @if (Model.DeferredLoading)
                {
                    <text>
                var form = $("#@wrapID").closest("form").data("pbaForm");

                var id = form.getPr("ID");

                if (id != 0 && load) {
                    multiselect.value([]);

                    $.get(application.url.GetStandart("PropertyKendoUI_CollectionRead", { parentMnemonic: "@Model.ParentViewModelConfig.Mnemonic", mnemonic: "@config.Mnemonic", property: "@propertyName", objectID: id }), function (res) {
                        if (res.error == 0) {
                            window['@wrapID'].value = res.collection;

                            multiselect.value(pbaAPI.getIDs(res.collection));
                        } else {
                            pbaAPI.errorMsg(res.message);
                        }
                    });
                } else {
                    var prdata = window['@wrapID'].value;

                    multiselect.value(pbaAPI.getIDs(prdata));
                }
                </text>
                }
                else
                {
                    <text>
                var prdata = window['@wrapID'].value;

                multiselect.value(pbaAPI.getIDs(prdata));
                </text>
                }
            },
            clear: function () {
                $("#@wrapID").find("#@multiSelectID").data("kendoMultiSelect").value([]);

                window['@wrapID'].value = [];
            },
            onSelect: function (e) {
                var multiselect = $("#@wrapID").find("#@multiSelectID").data("kendoMultiSelect");

                var prdata = window['@wrapID'].value;

                var uid = e.item.find(".data-item").attr("data-uid");

                var obj = multiselect.dataSource.getByUid(uid);

                prdata.push(obj);
            },
            onChange: function (e) {
                var prdata = window['@wrapID'].value;
                var r_prdata = [];

                var multiselect = $("#@wrapID").find("#@multiSelectID").data("kendoMultiSelect");

                multiselect.tagList.find("span.data-item").each(function () {
                    r_prdata.push(parseInt($(this).attr("id")));
                });

                var deleteids = [];

                for (var i = 0; i < prdata.length; i++) {
                    if (r_prdata.indexOf(prdata[i].ID) < 0) {
                        deleteids.push(prdata[i].ID);
                    }
                }

                for (var i = 0; i < deleteids.length; i++) {
                    for (var j = 0; j < prdata.length; j++) {
                        if (prdata[j].ID == deleteids[i]) {
                            prdata.splice(j, 1);
                        }
                    }
                }
            }
        };

        $("#@wrapID").closest("form").on("onAfterBind", function (e, form) {
            var editor = window['@wrapID'];

            var value = form.getPr("@propertyName");

            editor.value = [];

            if (value) {
                for (var i = 0; i < value.length; i++) {
                    var obj = value[i]["@field"];

                    if(obj){
                        editor.value.push(obj);
                    }
                }
            }

            editor.syncValue(true);
        });

        $("#@wrapID").closest("form").on("onSave", function(e, form) {
            var editor = window['@wrapID'];

            var value = editor.value;

            var dicValue = {};

            for (var i = 0; i < value.length; i++) {
                var obj = value[i];

                if(obj)
                    dicValue[obj.ID] = obj;
            }

            var prvalue = form.getPr("@propertyName") || [];
            var resvalue = [];

            for (var i = 0; i < prvalue.length; i++) {
                var obj = prvalue[i]["@field"];

                if (obj && obj.ID in dicValue) {
                    resvalue.push(prvalue[i]);

                    delete dicValue[obj.ID];
                }
            }

            for (var key in dicValue) {
                resvalue.push({
                    ID: 0,
                    "@field": dicValue[key]
                });
            }

            form.setPr("@propertyName", resvalue);
        });
    });
</script>

<div id="@wrapID" class="input-group">
    <div class="form-control" style="height: auto; min-height: 32px; padding: 0">
        @(Html.Kendo().MultiSelect()
              .Name(multiSelectID)
              .DataValueField("ID")
              .DataTextField(lookupProperty)
              .Filter("startswith")
              .Placeholder(placeholder)
              .AutoBind(false)
              .Events(e => e.Select(wrapID + ".onSelect").Change(wrapID + ".onChange"))
              .ItemTemplate(itemTpl)
              .TagTemplate(tagTpl)
              .DataSource(source => source.Read(read => read.Action("Filter_Read", isUser ? "Users" : "Standart").Data(wrapID + ".onAdditionalData")).ServerFiltering(true))
        )
    </div>

    <span class="input-group-btn">
        <button class="btn btn-default" type="button" onclick="window['@wrapID'].openDialog(); return false;" title="Выбрать"><span class="halfling halfling-align-justify"></span></button>
        <button class="btn btn-default" type="button" onclick="window['@wrapID'].clear(); return false;" title="Очистить"><span class="halfling halfling-remove"></span></button>
    </span>
</div>

<input id="@validationmsg" name="@validationmsg" type="hidden" @(Model.IsRequired ? "required" : "") validationmessage="Выберите значение" value="" />
<span class="k-invalid-msg" data-for="@validationmsg"></span>

<script>
    $(function () {
        var $form = $("#@wrapID").closest("form");

        $form.on("onAfterBind", function (e, form) {
            var val = form.getPr("@Model.PropertyName");

            if (val && val.length > 0)
                $("#@validationmsg").val("val");
            else
                $("#@validationmsg").val("");
        })

        $form.on("onSave", function (e, form) {
            var val = form.getPr("@Model.PropertyName");

            if (val && val.length > 0)
                $("#@validationmsg").val("val");
            else
                $("#@validationmsg").val("");
        });
    });
</script>